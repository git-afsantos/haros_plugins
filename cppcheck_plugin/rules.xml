<?xml version="1.0"?>
<rule>
    <tokenlist>simple</tokenlist>
    <pattern> register </pattern>
    <message>
        <id>harosRegisterKeyword</id>
        <severity>warning</severity>
        <summary>Do not use the deprecated register keyword.</summary>
    </message>
</rule>
<rule>
    <tokenlist>simple</tokenlist>
    <pattern> std :: (?:auto_ptr|bind1st|bind2nd|ptr_mem_fun|ptr_mem_fun_ref|unary_function|binary_function) </pattern>
    <message>
        <id>harosDeprecatedSTL</id>
        <severity>warning</severity>
        <summary>Do not use deprecated STL features.</summary>
    </message>
</rule>
<rule>
    <tokenlist>simple</tokenlist>
    <pattern>\) throw \( \w+ \)</pattern>
    <message>
        <id>harosThrowSpecification</id>
        <severity>warning</severity>
        <summary>Do not use throw exception specifications. Use noexcept instead.</summary>
    </message>
</rule>
<rule>
    <tokenlist>simple</tokenlist>
    <pattern> case[^:]+: ;(?:(?! break ;)[^;]*;)+?(?= (?:case|default))</pattern>
    <message>
        <id>harosCaseWithoutBreak</id>
        <severity>warning</severity>
        <summary>Non-empty case without a break statement.</summary>
    </message>
</rule>
<rule>
    <tokenlist>simple</tokenlist>
    <pattern> case (?:true|false) :</pattern>
    <message>
        <id>harosBooleanCase</id>
        <severity>warning</severity>
        <summary>Do not use booleans as case labels.</summary>
    </message>
</rule>
<rule>
    <tokenlist>simple</tokenlist>
    <pattern> enum (?:class )?\w+ {</pattern>
    <message>
        <id>harosEnumWithoutBase</id>
        <severity>warning</severity>
        <summary>Specify a base type for an enum.</summary>
    </message>
</rule>
<rule>
    <tokenlist>simple</tokenlist>
    <pattern> asm \(</pattern>
    <message>
        <id>harosInlineAssembly</id>
        <severity>warning</severity>
        <summary>Found use of inline assembly.</summary>
    </message>
</rule>
<rule>
    <tokenlist>simple</tokenlist>
    <pattern> (?:\* ){2,}(?!argv)\w+</pattern>
    <message>
        <id>harosDoublePointer</id>
        <severity>warning</severity>
        <summary>Found two or more levels of pointer indirection.</summary>
    </message>
</rule>
<rule>
    <tokenlist>simple</tokenlist>
    <pattern> (?:\* )+(?:(?!argv)\w+) \[ \]</pattern>
    <message>
        <id>harosDoublePointer</id>
        <severity>warning</severity>
        <summary>Found two or more levels of pointer indirection.</summary>
    </message>
</rule>
<rule>
    <tokenlist>simple</tokenlist>
    <pattern> (?:\* ){3,}\w+</pattern>
    <message>
        <id>harosTriplePointer</id>
        <severity>warning</severity>
        <summary>Found three or more levels of pointer indirection.</summary>
    </message>
</rule>
<rule>
    <tokenlist>simple</tokenlist>
    <pattern> (?:\* ){2,}\w+ \[ \]</pattern>
    <message>
        <id>harosTriplePointer</id>
        <severity>warning</severity>
        <summary>Found three or more levels of pointer indirection.</summary>
    </message>
</rule>
<rule>
    <tokenlist>simple</tokenlist>
    <pattern> \w+ (?:\* )*\w+ \( (?:[^,)]+,){6,}[^)]+\)</pattern>
    <message>
        <id>harosSixParams</id>
        <severity>warning</severity>
        <summary>Found function with 7 or more parameters.</summary>
    </message>
</rule>
<rule>
    <tokenlist>simple</tokenlist>
    <pattern><![CDATA[ \w+ \((?:[^,)]+,)* std :: unique_ptr <[^>]+> const & \w+[^)]+\)]]></pattern>
    <message>
        <id>harosConstUniquePtr</id>
        <severity>warning</severity>
        <summary>Found const reference of std::unique_ptr.</summary>
    </message>
</rule>
<rule>
    <tokenlist>simple</tokenlist>
    <pattern> \w+ (?:\* )*\w+ \((?:[^,)]+,)* [^=)]+= [^)]+\)</pattern>
    <message>
        <id>harosDefaultArguments</id>
        <severity>warning</severity>
        <summary>Found function with default arguments.</summary>
    </message>
</rule>
<rule>
    <tokenlist>simple</tokenlist>
    <pattern><![CDATA[ std :: vector < bool >]]></pattern>
    <message>
        <id>harosBooleanVector</id>
        <severity>warning</severity>
        <summary>Found std::vector of bool.</summary>
    </message>
</rule>
<rule>
    <tokenlist>simple</tokenlist>
    <pattern> union \w+ {</pattern>
    <message>
        <id>harosUnion</id>
        <severity>warning</severity>
        <summary>Found an union. Use polymorphic types instead.</summary>
    </message>
</rule>
<rule>
    <tokenlist>simple</tokenlist>
    <pattern><![CDATA[ (?:unsigned )?(?:int|short|long) (?:\* |& )?(?:(?!double)\w+)]]></pattern>
    <message>
        <id>harosIntegerTypes</id>
        <severity>warning</severity>
        <summary>Found implementation defined integer type.</summary>
    </message>
</rule>
<rule>
    <tokenlist>simple</tokenlist>
    <pattern> \w+ = [^;{]*?(?:(?:\+\+ \w+)|(?:-- \w+)|(?:\w+ \+\+)|(?:\w+ --))</pattern>
    <message>
        <id>harosAssignIncrement</id>
        <severity>warning</severity>
        <summary>Found increment or decrement as a subexpression.</summary>
    </message>
</rule>
<rule>
    <tokenlist>simple</tokenlist>
    <pattern> \w+ = [^;{]*?\w+ = </pattern>
    <message>
        <id>harosAssignAssignment</id>
        <severity>warning</severity>
        <summary>Found assignment as a subexpression.</summary>
    </message>
</rule>
<rule>
    <tokenlist>simple</tokenlist>
    <pattern> (?:\d+\.\d+ ==)|(?:== \d+\.\d+)</pattern>
    <message>
        <id>harosFloatEquality</id>
        <severity>warning</severity>
        <summary>Found float equality check.</summary>
    </message>
</rule>
<rule>
    <tokenlist>simple</tokenlist>
    <pattern><![CDATA[ operator& \([^)]*\)]]></pattern>
    <message>
        <id>harosOverrideUnaryAnd</id>
        <severity>warning</severity>
        <summary>Found override of the unary address-of operator.</summary>
    </message>
</rule>
<rule>
    <tokenlist>simple</tokenlist>
    <pattern><![CDATA[ operator&& \([^)]*\)]]></pattern>
    <message>
        <id>harosOverrideBinaryAnd</id>
        <severity>warning</severity>
        <summary>Found override of the binary and operator.</summary>
    </message>
</rule>
<rule>
    <tokenlist>simple</tokenlist>
    <pattern> operator\|\| \([^)]*\)</pattern>
    <message>
        <id>harosOverrideBinaryOr</id>
        <severity>warning</severity>
        <summary>Found override of the binary or operator.</summary>
    </message>
</rule>
<rule>
    <tokenlist>simple</tokenlist>
    <pattern> operator , \([^)]*\)</pattern>
    <message>
        <id>harosOverrideComma</id>
        <severity>warning</severity>
        <summary>Found override of the comma operator.</summary>
    </message>
</rule>
<rule>
    <tokenlist>simple</tokenlist>
    <pattern> errno </pattern>
    <message>
        <id>harosUsingErrno</id>
        <severity>warning</severity>
        <summary>Found use of errno.</summary>
    </message>
</rule>
<rule>
    <tokenlist>simple</tokenlist>
    <pattern><![CDATA[ std :: array <[^>]+> (?:const )?&& ]]></pattern>
    <message>
        <id>harosRvalueStdArray</id>
        <severity>warning</severity>
        <summary>Found an rvalue reference of a std::array.</summary>
    </message>
</rule>
